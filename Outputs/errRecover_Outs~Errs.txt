OUTPUT OF test_errRecover.txt: 

class Utility {
    int var1 [ 4 ] [ 5 ;
    float var2 ;
    int findMax ( int array [ 100 ] ) {
        int maxValue ;
        int idx ;
        maxValue = array [ 100 ] ;
        for ( int idx = 99 ;
        idx > 0 ;
        idx = idx - 1 ) {
            f ;
            
        };
        
    };
    
};
int findMin ( int array [ 100 ] ) {
    int minValue ;
    int idx ;
    minValue = array [ 100 ] ;
    for ( int idx = 1 ;
    idx <= 99 ;
    idx = ( idx ) + 1 ) {
        if ( array [ idx ] < maxValue ) then {
            maxValue = array [ idx ] ;
            
        }else {
            
        };
        
    };
    return ( minValue ) ;
    
};
{
    int sample [ 100 ] ;
    int idx ;
    int maxValue ;
    int minValue ;
    Utility utility ;
    Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ;
    for ( int t = 0 ;
    t <= 100 ;
    t = t + 1 ) {
        get ( sample [ t ] ) ;
        sample [ t ] = ( sample [ t ] * randomize ( ) ) ;
        
    };
    maxValue = utility . findMax ( sample ) ;
    minValue = utility . findMin ( sample ) ;
    utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ;
    arrayUtility [ 1 ] [ 1 ] [ 1 ] [ 1 ] . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 2 ;
    put ( maxValue ) ;
    put ( minValue ) ;
    
};


ERRORS OF test_errRecover.txt:

error, wrong token. Expected: ] found Token([, '[', Line:Pos=(3, 19))
table error, Expected {createOrAssign -> ID arraySize ; | indice gen_nest assign ;} found Token((, '(', Line:Pos=(12, 15))
error, wrong token. Expected: ; found Token(else, 'else', Line:Pos=(15, 17))
table error, Expected {classBody -> type ID varOrFunc | EPSILON} found Token(return, 'return', Line:Pos=(17, 15))
table error, Expected {funcDef -> funcHead funcBody ; funcDef | EPSILON} found Token(}, '}', Line:Pos=(33, 2))
