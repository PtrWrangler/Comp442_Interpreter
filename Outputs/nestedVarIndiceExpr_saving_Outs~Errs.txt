OUTPUT OF test_nestedVarIndiceExpr_saving.txt: 

class test {
    int v ;
    int findMax ( int i ) {
        return ( 25 ) ;
        
    };
    
};
program {
    test b [ 2 ] ;
    test t [ 100 ] [ 50 ] [ 3 ] ;
    int x [ 1 ] [ 2 ] ;
    x [ 1 - 2 - 3 - x [ 0 - b [ 1 ] ] [ 0 ] ] [ 99 ] = 6 ;
    x [ x [ 1 ] [ 2 + x [ 0 ] [ 0 ] + 77 ] ] [ 99 ] = 5 + 6 + 7 + t [ 3 ] [ 4 ] [ 5 ] ;
    t [ 2 ] [ 4 - 5 + 3 - t [ 5 ] [ t [ 1 ] [ 2 ] [ 3 ] ] [ 4 ] ] [ 4 ] = 4 ;
    x [ 0 ] [ 0 ] = 5 + 6 * 7 - t [ 5 ] [ 5 ] [ 1 ] ;
    int testfunc ;
    
};


ERRORS OF test_nestedVarIndiceExpr_saving.txt:
  -- ! Error locations are accurate to the original input file ! --

Source Program contained no parsing errors.
Source Program contained no semantic errors.

SYMBOL TABLE STRUCTURE:

Sym_Tbl(name:Token(Global_Table, 'global', Line:Pos=(0, 0)), entries:[
Entry  (Token(ID, 'test', Line:Pos=(1, 11)), 'class', '', IDX:[], ASS:[], link: 
    Sym_Tbl(name:Token(ID, 'test', Line:Pos=(1, 11)), entries:[
    Entry  (Token(ID, 'v', Line:Pos=(2, 10)), 'variable', int, IDX:[], ASS:[], link: None ), 
    Entry  (Token(ID, 'findMax', Line:Pos=(4, 16)), 'function', int : i, IDX:[], ASS:[], link: 
        Sym_Tbl(name:Token(ID, 'findMax', Line:Pos=(4, 16)), entries:[
        Entry  (Token(ID, 'i', Line:Pos=(4, 22)), 'parameter', int, IDX:[], ASS:[], link: None )]) )]) ), 
Entry  (Token(program, 'program', Line:Pos=(11, 8)), 'function', '', IDX:[], ASS:[], link: 
    Sym_Tbl(name:Token(program, 'program', Line:Pos=(11, 8)), entries:[
    Entry  (Token(ID, 'b', Line:Pos=(13, 11)), 'variable', test[2], IDX:[], ASS:[], link: None ), 
    Entry  (Token(ID, 't', Line:Pos=(14, 11)), 'variable', test[100][50][3], IDX:[], ASS:[], link: None ), 
    Entry  (Token(ID, 'x', Line:Pos=(15, 10)), 'variable', int[1][2], IDX:[], ASS:[], link: None ), 
    Entry  (Token(ID, 'x', Line:Pos=(17, 6)), 'assignment', '', IDX:[['1', '-', '2', '-', '3', '-', 
    Entry  (Token(ID, 'x', Line:Pos=(17, 14)), 'variable call', '', IDX:[['0', '-', 
    Entry  (Token(ID, 'b', Line:Pos=(17, 18)), 'variable call', '', IDX:[['1']], ASS:[], link: None )], ['0']], ASS:[], link: None )], ['99']], ASS:['6'], link: None ), 
    Entry  (Token(ID, 'x', Line:Pos=(19, 6)), 'assignment', '', IDX:[[
    Entry  (Token(ID, 'x', Line:Pos=(19, 8)), 'variable call', '', IDX:[['1'], ['2', '+', 
    Entry  (Token(ID, 'x', Line:Pos=(19, 15)), 'variable call', '', IDX:[['0'], ['0']], ASS:[], link: None ), '+', '77']], ASS:[], link: None )], ['99']], ASS:['5', '+', '6', '+', '7', '+', 
    Entry  (Token(ID, 't', Line:Pos=(19, 46)), 'variable call', '', IDX:[['3'], ['4'], ['5']], ASS:[], link: None )], link: None ), 
    Entry  (Token(ID, 't', Line:Pos=(21, 6)), 'assignment', '', IDX:[['2'], ['4', '-', '5', '+', '3', '-', 
    Entry  (Token(ID, 't', Line:Pos=(21, 17)), 'variable call', '', IDX:[['5'], [
    Entry  (Token(ID, 't', Line:Pos=(21, 22)), 'variable call', '', IDX:[['1'], ['2'], ['3']], ASS:[], link: None )], ['4']], ASS:[], link: None )], ['4']], ASS:['4'], link: None ), 
    Entry  (Token(ID, 'x', Line:Pos=(23, 6)), 'assignment', '', IDX:[['0'], ['0']], ASS:['5', '+', '6', '*', '7', '-', 
    Entry  (Token(ID, 't', Line:Pos=(23, 28)), 'variable call', '', IDX:[['5'], ['5'], ['1']], ASS:[], link: None )], link: None ), 
    Entry  (Token(ID, 'testfunc', Line:Pos=(25, 17)), 'variable', int, IDX:[], ASS:[], link: None )]) )])