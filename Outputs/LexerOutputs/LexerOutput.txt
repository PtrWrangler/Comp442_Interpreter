
KEYWORD: Token(class, 'class', Line:Pos=(1, 6))
ID: Token(ID, 'test', Line:Pos=(1, 11))
CURLY_OPEN: Token({, '{', Line:Pos=(1, 12))
KEYWORD: Token(int, 'int', Line:Pos=(2, 8))
ID: Token(ID, 'v', Line:Pos=(2, 10))
SEMI_COLON: Token(;, ';', Line:Pos=(2, 11))
KEYWORD: Token(float, 'float', Line:Pos=(3, 10))
ID: Token(ID, 'rr', Line:Pos=(3, 13))
SQUARE_OPEN: Token([, '[', Line:Pos=(3, 14))
INT: Token(INT, '20', Line:Pos=(3, 16))
SQUARE_CLOSE: Token(], ']', Line:Pos=(3, 17))
SQUARE_OPEN: Token([, '[', Line:Pos=(3, 18))
INT: Token(INT, '10', Line:Pos=(3, 20))
SQUARE_CLOSE: Token(], ']', Line:Pos=(3, 21))
SQUARE_OPEN: Token([, '[', Line:Pos=(3, 22))
INT: Token(INT, '5', Line:Pos=(3, 23))
SQUARE_CLOSE: Token(], ']', Line:Pos=(3, 24))
SEMI_COLON: Token(;, ';', Line:Pos=(3, 25))
KEYWORD: Token(float, 'float', Line:Pos=(4, 10))
ID: Token(ID, 'abc', Line:Pos=(4, 14))
SEMI_COLON: Token(;, ';', Line:Pos=(4, 15))
ID: Token(ID, 'Other', Line:Pos=(6, 10))
ID: Token(ID, 'oner', Line:Pos=(6, 15))
SQUARE_OPEN: Token([, '[', Line:Pos=(6, 16))
INT: Token(INT, '1', Line:Pos=(6, 17))
SQUARE_CLOSE: Token(], ']', Line:Pos=(6, 18))
SQUARE_OPEN: Token([, '[', Line:Pos=(6, 19))
INT: Token(INT, '1', Line:Pos=(6, 20))
SQUARE_CLOSE: Token(], ']', Line:Pos=(6, 21))
SEMI_COLON: Token(;, ';', Line:Pos=(6, 22))
ID: Token(ID, 'Other', Line:Pos=(7, 10))
ID: Token(ID, 'one', Line:Pos=(7, 14))
SEMI_COLON: Token(;, ';', Line:Pos=(7, 15))
KEYWORD: Token(int, 'int', Line:Pos=(10, 8))
ID: Token(ID, 'findMax', Line:Pos=(10, 16))
BRACKET_OPEN: Token((, '(', Line:Pos=(10, 17))
KEYWORD: Token(int, 'int', Line:Pos=(10, 20))
ID: Token(ID, 'i', Line:Pos=(10, 22))
COMMA: Token(,, ',', Line:Pos=(10, 23))
KEYWORD: Token(float, 'float', Line:Pos=(10, 29))
ID: Token(ID, 'u', Line:Pos=(10, 31))
SQUARE_OPEN: Token([, '[', Line:Pos=(10, 32))
INT: Token(INT, '2', Line:Pos=(10, 33))
SQUARE_CLOSE: Token(], ']', Line:Pos=(10, 34))
SQUARE_OPEN: Token([, '[', Line:Pos=(10, 35))
INT: Token(INT, '2', Line:Pos=(10, 36))
SQUARE_CLOSE: Token(], ']', Line:Pos=(10, 37))
BRACKET_CLOSE: Token(), ')', Line:Pos=(10, 38))
CURLY_OPEN: Token({, '{', Line:Pos=(10, 39))
COMMENT: Token(//, '//i = findMin();', Line:Pos=(11, 25))
COMMENT: Token(//, '//one[3][one].two = 3;', Line:Pos=(13, 31))
COMMENT: Token(//, '//one[3][2 + oner[3][3]].two = 3;', Line:Pos=(14, 42))
KEYWORD: Token(if, 'if', Line:Pos=(16, 15))
BRACKET_OPEN: Token((, '(', Line:Pos=(16, 17))
ID: Token(ID, 'i', Line:Pos=(16, 18))
COMPARE_OP: Token(==, '==', Line:Pos=(16, 21))
INT: Token(INT, '1', Line:Pos=(16, 23))
BRACKET_CLOSE: Token(), ')', Line:Pos=(16, 24))
KEYWORD: Token(then, 'then', Line:Pos=(16, 29))
KEYWORD: Token(if, 'if', Line:Pos=(17, 19))
BRACKET_OPEN: Token((, '(', Line:Pos=(17, 21))
ID: Token(ID, 'i', Line:Pos=(17, 22))
COMPARE_OP: Token(==, '==', Line:Pos=(17, 25))
INT: Token(INT, '3', Line:Pos=(17, 27))
BRACKET_CLOSE: Token(), ')', Line:Pos=(17, 28))
KEYWORD: Token(then, 'then', Line:Pos=(17, 33))
CURLY_OPEN: Token({, '{', Line:Pos=(17, 35))
ID: Token(ID, 'i', Line:Pos=(18, 22))
ASSIGN_OP: Token(=, '=', Line:Pos=(18, 24))
INT: Token(INT, '3', Line:Pos=(18, 26))
SEMI_COLON: Token(;, ';', Line:Pos=(18, 27))
CURLY_CLOSE: Token(}, '}', Line:Pos=(19, 18))
KEYWORD: Token(else, 'else', Line:Pos=(19, 23))
CURLY_OPEN: Token({, '{', Line:Pos=(19, 25))
ID: Token(ID, 'i', Line:Pos=(20, 22))
ASSIGN_OP: Token(=, '=', Line:Pos=(20, 24))
INT: Token(INT, '3', Line:Pos=(20, 26))
SEMI_COLON: Token(;, ';', Line:Pos=(20, 27))
CURLY_CLOSE: Token(}, '}', Line:Pos=(21, 18))
SEMI_COLON: Token(;, ';', Line:Pos=(21, 19))
KEYWORD: Token(else, 'else', Line:Pos=(23, 17))
CURLY_OPEN: Token({, '{', Line:Pos=(23, 18))
ID: Token(ID, 'i', Line:Pos=(24, 18))
ASSIGN_OP: Token(=, '=', Line:Pos=(24, 20))
INT: Token(INT, '3', Line:Pos=(24, 22))
SEMI_COLON: Token(;, ';', Line:Pos=(24, 23))
CURLY_CLOSE: Token(}, '}', Line:Pos=(25, 14))
SEMI_COLON: Token(;, ';', Line:Pos=(25, 15))
KEYWORD: Token(int, 'int', Line:Pos=(26, 12))
ID: Token(ID, 'y', Line:Pos=(26, 14))
SEMI_COLON: Token(;, ';', Line:Pos=(26, 15))
ID: Token(ID, 'y', Line:Pos=(27, 10))
ASSIGN_OP: Token(=, '=', Line:Pos=(27, 12))
ID: Token(ID, 'func', Line:Pos=(27, 17))
BRACKET_OPEN: Token((, '(', Line:Pos=(27, 18))
FLOAT: Token(FLOAT, '4.4', Line:Pos=(27, 21))
COMMA: Token(,, ',', Line:Pos=(27, 22))
FLOAT: Token(FLOAT, '4.4', Line:Pos=(27, 26))
BRACKET_CLOSE: Token(), ')', Line:Pos=(27, 27))
SEMI_COLON: Token(;, ';', Line:Pos=(27, 28))
ID: Token(ID, 'rr', Line:Pos=(30, 11))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 12))
INT: Token(INT, '6', Line:Pos=(30, 13))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 14))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 15))
ID: Token(ID, 'func', Line:Pos=(30, 19))
BRACKET_OPEN: Token((, '(', Line:Pos=(30, 20))
INT: Token(INT, '5', Line:Pos=(30, 21))
COMMA: Token(,, ',', Line:Pos=(30, 22))
ID: Token(ID, 'rr', Line:Pos=(30, 25))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 26))
INT: Token(INT, '4', Line:Pos=(30, 27))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 28))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 29))
INT: Token(INT, '5', Line:Pos=(30, 30))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 31))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 32))
INT: Token(INT, '4', Line:Pos=(30, 33))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 34))
BRACKET_CLOSE: Token(), ')', Line:Pos=(30, 35))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 36))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 37))
INT: Token(INT, '0', Line:Pos=(30, 38))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 39))
ASSIGN_OP: Token(=, '=', Line:Pos=(30, 41))
ID: Token(ID, 'func', Line:Pos=(30, 46))
BRACKET_OPEN: Token((, '(', Line:Pos=(30, 47))
INT: Token(INT, '4', Line:Pos=(30, 48))
COMMA: Token(,, ',', Line:Pos=(30, 49))
ID: Token(ID, 'rr', Line:Pos=(30, 52))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 53))
INT: Token(INT, '1', Line:Pos=(30, 54))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 55))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 56))
ID: Token(ID, 'rr', Line:Pos=(30, 58))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 59))
INT: Token(INT, '0', Line:Pos=(30, 60))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 61))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 62))
INT: Token(INT, '3', Line:Pos=(30, 63))
MATH_OP: Token(+, '+', Line:Pos=(30, 64))
ID: Token(ID, 'func', Line:Pos=(30, 68))
BRACKET_OPEN: Token((, '(', Line:Pos=(30, 69))
INT: Token(INT, '1', Line:Pos=(30, 70))
COMMA: Token(,, ',', Line:Pos=(30, 71))
FLOAT: Token(FLOAT, '1.1', Line:Pos=(30, 75))
BRACKET_CLOSE: Token(), ')', Line:Pos=(30, 76))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 77))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 78))
INT: Token(INT, '0', Line:Pos=(30, 79))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 80))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 81))
SQUARE_OPEN: Token([, '[', Line:Pos=(30, 82))
INT: Token(INT, '4', Line:Pos=(30, 83))
SQUARE_CLOSE: Token(], ']', Line:Pos=(30, 84))
BRACKET_CLOSE: Token(), ')', Line:Pos=(30, 85))
SEMI_COLON: Token(;, ';', Line:Pos=(30, 86))
KEYWORD: Token(return, 'return', Line:Pos=(31, 15))
BRACKET_OPEN: Token((, '(', Line:Pos=(31, 17))
INT: Token(INT, '25', Line:Pos=(31, 19))
BRACKET_CLOSE: Token(), ')', Line:Pos=(31, 20))
SEMI_COLON: Token(;, ';', Line:Pos=(31, 21))
COMMENT: Token(//, '//int a[2];', Line:Pos=(33, 20))
ID: Token(ID, 'v', Line:Pos=(35, 10))
ASSIGN_OP: Token(=, '=', Line:Pos=(35, 12))
INT: Token(INT, '5', Line:Pos=(35, 14))
MATH_OP: Token(+, '+', Line:Pos=(35, 15))
INT: Token(INT, '6', Line:Pos=(35, 16))
MATH_OP: Token(-, '-', Line:Pos=(35, 17))
INT: Token(INT, '8', Line:Pos=(35, 18))
MATH_OP: Token(*, '*', Line:Pos=(35, 19))
FLOAT: Token(FLOAT, '5.5', Line:Pos=(35, 22))
COMPARE_OP: Token(>, '>', Line:Pos=(35, 23))
INT: Token(INT, '0', Line:Pos=(35, 24))
KEYWORD: Token(and, 'and', Line:Pos=(35, 28))
INT: Token(INT, '1', Line:Pos=(35, 30))
SEMI_COLON: Token(;, ';', Line:Pos=(35, 31))
COMMENT: Token(//, '//i = dupFunc();', Line:Pos=(37, 25))
CURLY_CLOSE: Token(}, '}', Line:Pos=(38, 6))
SEMI_COLON: Token(;, ';', Line:Pos=(38, 7))
CURLY_CLOSE: Token(}, '}', Line:Pos=(40, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(40, 3))
KEYWORD: Token(class, 'class', Line:Pos=(42, 6))
ID: Token(ID, 'Other', Line:Pos=(42, 12))
CURLY_OPEN: Token({, '{', Line:Pos=(42, 13))
KEYWORD: Token(int, 'int', Line:Pos=(43, 8))
ID: Token(ID, 'two', Line:Pos=(43, 12))
SEMI_COLON: Token(;, ';', Line:Pos=(43, 13))
CURLY_CLOSE: Token(}, '}', Line:Pos=(44, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(44, 3))
KEYWORD: Token(int, 'int', Line:Pos=(46, 4))
ID: Token(ID, 'func', Line:Pos=(46, 9))
BRACKET_OPEN: Token((, '(', Line:Pos=(46, 10))
KEYWORD: Token(int, 'int', Line:Pos=(46, 13))
ID: Token(ID, 'i', Line:Pos=(46, 15))
COMMA: Token(,, ',', Line:Pos=(46, 16))
KEYWORD: Token(float, 'float', Line:Pos=(46, 22))
ID: Token(ID, 'j', Line:Pos=(46, 24))
BRACKET_CLOSE: Token(), ')', Line:Pos=(46, 25))
CURLY_OPEN: Token({, '{', Line:Pos=(46, 26))
KEYWORD: Token(return, 'return', Line:Pos=(47, 11))
BRACKET_OPEN: Token((, '(', Line:Pos=(47, 13))
INT: Token(INT, '1', Line:Pos=(47, 14))
BRACKET_CLOSE: Token(), ')', Line:Pos=(47, 15))
SEMI_COLON: Token(;, ';', Line:Pos=(47, 16))
ID: Token(ID, 'test', Line:Pos=(48, 9))
ID: Token(ID, 't', Line:Pos=(48, 11))
SEMI_COLON: Token(;, ';', Line:Pos=(48, 12))
CURLY_CLOSE: Token(}, '}', Line:Pos=(50, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(50, 3))
KEYWORD: Token(program, 'program', Line:Pos=(52, 8))
CURLY_OPEN: Token({, '{', Line:Pos=(52, 9))
COMMENT: Token(/*, '/*\n    float b[2];\n    int t[100][50][3];\n    int x[1][2];\n    test tt;\n    int v;\n\n    x[0][0] = b[v];\n\n    //tt.abc = 9.9;\n\n\n    x[1-not-2-x[0-b[func(8>9 / 999 +9-8-7, b[1])]][0]][99] = 6;\n\n    x[x[1][2+x[0][0]+77]][99] = 5 + 6 + 7 + t[3][4][5];\n\n    t[2][4-5+3-t[5][t[1][2][3]][4]][t[0][0][0]] = 4;\n\n    x[0][0] = 5 + 6 * 7 - t[5][5][1];\n\n\n    int testfunc;\n    */', Line:Pos=(76, 7))
CURLY_CLOSE: Token(}, '}', Line:Pos=(78, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(78, 3))
$: Token($, None, Line:Pos=(78, 3))