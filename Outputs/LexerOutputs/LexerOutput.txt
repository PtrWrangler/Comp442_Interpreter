
KEYWORD: Token(class, 'class', Line:Pos=(1, 6))
ID: Token(ID, 'test', Line:Pos=(1, 11))
CURLY_OPEN: Token({, '{', Line:Pos=(1, 12))
KEYWORD: Token(int, 'int', Line:Pos=(2, 8))
ID: Token(ID, 'v', Line:Pos=(2, 10))
SEMI_COLON: Token(;, ';', Line:Pos=(2, 11))
KEYWORD: Token(float, 'float', Line:Pos=(3, 10))
ID: Token(ID, 'rr', Line:Pos=(3, 13))
SQUARE_OPEN: Token([, '[', Line:Pos=(3, 14))
INT: Token(INT, '20', Line:Pos=(3, 16))
SQUARE_CLOSE: Token(], ']', Line:Pos=(3, 17))
SQUARE_OPEN: Token([, '[', Line:Pos=(3, 18))
INT: Token(INT, '10', Line:Pos=(3, 20))
SQUARE_CLOSE: Token(], ']', Line:Pos=(3, 21))
SQUARE_OPEN: Token([, '[', Line:Pos=(3, 22))
INT: Token(INT, '5', Line:Pos=(3, 23))
SQUARE_CLOSE: Token(], ']', Line:Pos=(3, 24))
SEMI_COLON: Token(;, ';', Line:Pos=(3, 25))
KEYWORD: Token(float, 'float', Line:Pos=(4, 10))
ID: Token(ID, 'tit', Line:Pos=(4, 14))
SEMI_COLON: Token(;, ';', Line:Pos=(4, 15))
ID: Token(ID, 'Other', Line:Pos=(5, 10))
ID: Token(ID, 'one', Line:Pos=(5, 14))
SQUARE_OPEN: Token([, '[', Line:Pos=(5, 15))
INT: Token(INT, '1', Line:Pos=(5, 16))
SQUARE_CLOSE: Token(], ']', Line:Pos=(5, 17))
SQUARE_OPEN: Token([, '[', Line:Pos=(5, 18))
INT: Token(INT, '1', Line:Pos=(5, 19))
SQUARE_CLOSE: Token(], ']', Line:Pos=(5, 20))
SEMI_COLON: Token(;, ';', Line:Pos=(5, 21))
KEYWORD: Token(int, 'int', Line:Pos=(7, 8))
ID: Token(ID, 'dupFunc', Line:Pos=(7, 16))
BRACKET_OPEN: Token((, '(', Line:Pos=(7, 17))
BRACKET_CLOSE: Token(), ')', Line:Pos=(7, 18))
CURLY_OPEN: Token({, '{', Line:Pos=(7, 19))
CURLY_CLOSE: Token(}, '}', Line:Pos=(7, 20))
SEMI_COLON: Token(;, ';', Line:Pos=(7, 21))
KEYWORD: Token(int, 'int', Line:Pos=(9, 8))
ID: Token(ID, 'findMax', Line:Pos=(9, 16))
BRACKET_OPEN: Token((, '(', Line:Pos=(9, 17))
KEYWORD: Token(int, 'int', Line:Pos=(9, 20))
ID: Token(ID, 'i', Line:Pos=(9, 22))
COMMA: Token(,, ',', Line:Pos=(9, 23))
KEYWORD: Token(float, 'float', Line:Pos=(9, 29))
ID: Token(ID, 'u', Line:Pos=(9, 31))
SQUARE_OPEN: Token([, '[', Line:Pos=(9, 32))
INT: Token(INT, '2', Line:Pos=(9, 33))
SQUARE_CLOSE: Token(], ']', Line:Pos=(9, 34))
SQUARE_OPEN: Token([, '[', Line:Pos=(9, 35))
INT: Token(INT, '2', Line:Pos=(9, 36))
SQUARE_CLOSE: Token(], ']', Line:Pos=(9, 37))
BRACKET_CLOSE: Token(), ')', Line:Pos=(9, 38))
CURLY_OPEN: Token({, '{', Line:Pos=(9, 39))
COMMENT: Token(//, '//i = findMin();', Line:Pos=(10, 25))
ID: Token(ID, 'one', Line:Pos=(12, 12))
SQUARE_OPEN: Token([, '[', Line:Pos=(12, 13))
INT: Token(INT, '3', Line:Pos=(12, 14))
SQUARE_CLOSE: Token(], ']', Line:Pos=(12, 15))
SQUARE_OPEN: Token([, '[', Line:Pos=(12, 16))
INT: Token(INT, '2', Line:Pos=(12, 17))
SQUARE_CLOSE: Token(], ']', Line:Pos=(12, 18))
PERIOD: Token(., '.', Line:Pos=(12, 19))
ID: Token(ID, 'two', Line:Pos=(12, 22))
ASSIGN_OP: Token(=, '=', Line:Pos=(12, 24))
INT: Token(INT, '3', Line:Pos=(12, 26))
SEMI_COLON: Token(;, ';', Line:Pos=(12, 27))
COMMENT: Token(//, '//one[3][2 + one[3][3]].two = 3;', Line:Pos=(13, 41))
KEYWORD: Token(if, 'if', Line:Pos=(15, 15))
BRACKET_OPEN: Token((, '(', Line:Pos=(15, 17))
ID: Token(ID, 'i', Line:Pos=(15, 18))
COMPARE_OP: Token(==, '==', Line:Pos=(15, 21))
INT: Token(INT, '1', Line:Pos=(15, 23))
BRACKET_CLOSE: Token(), ')', Line:Pos=(15, 24))
KEYWORD: Token(then, 'then', Line:Pos=(15, 29))
CURLY_OPEN: Token({, '{', Line:Pos=(15, 31))
ID: Token(ID, 'i', Line:Pos=(16, 18))
ASSIGN_OP: Token(=, '=', Line:Pos=(16, 20))
INT: Token(INT, '2', Line:Pos=(16, 22))
SEMI_COLON: Token(;, ';', Line:Pos=(16, 23))
CURLY_CLOSE: Token(}, '}', Line:Pos=(17, 14))
KEYWORD: Token(else, 'else', Line:Pos=(18, 17))
CURLY_OPEN: Token({, '{', Line:Pos=(18, 18))
ID: Token(ID, 'i', Line:Pos=(19, 18))
ASSIGN_OP: Token(=, '=', Line:Pos=(19, 20))
INT: Token(INT, '3', Line:Pos=(19, 22))
SEMI_COLON: Token(;, ';', Line:Pos=(19, 23))
CURLY_CLOSE: Token(}, '}', Line:Pos=(20, 14))
SEMI_COLON: Token(;, ';', Line:Pos=(20, 15))
ID: Token(ID, 'rr', Line:Pos=(22, 11))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 12))
INT: Token(INT, '6', Line:Pos=(22, 13))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 14))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 15))
ID: Token(ID, 'func', Line:Pos=(22, 19))
BRACKET_OPEN: Token((, '(', Line:Pos=(22, 20))
INT: Token(INT, '5', Line:Pos=(22, 21))
COMMA: Token(,, ',', Line:Pos=(22, 22))
ID: Token(ID, 'rr', Line:Pos=(22, 25))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 26))
INT: Token(INT, '4', Line:Pos=(22, 27))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 28))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 29))
INT: Token(INT, '5', Line:Pos=(22, 30))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 31))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 32))
INT: Token(INT, '4', Line:Pos=(22, 33))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 34))
BRACKET_CLOSE: Token(), ')', Line:Pos=(22, 35))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 36))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 37))
INT: Token(INT, '0', Line:Pos=(22, 38))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 39))
ASSIGN_OP: Token(=, '=', Line:Pos=(22, 41))
ID: Token(ID, 'func', Line:Pos=(22, 46))
BRACKET_OPEN: Token((, '(', Line:Pos=(22, 47))
INT: Token(INT, '4', Line:Pos=(22, 48))
COMMA: Token(,, ',', Line:Pos=(22, 49))
ID: Token(ID, 'rr', Line:Pos=(22, 52))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 53))
INT: Token(INT, '1', Line:Pos=(22, 54))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 55))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 56))
ID: Token(ID, 'rr', Line:Pos=(22, 58))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 59))
INT: Token(INT, '0', Line:Pos=(22, 60))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 61))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 62))
INT: Token(INT, '3', Line:Pos=(22, 63))
MATH_OP: Token(+, '+', Line:Pos=(22, 64))
ID: Token(ID, 'func', Line:Pos=(22, 68))
BRACKET_OPEN: Token((, '(', Line:Pos=(22, 69))
INT: Token(INT, '1', Line:Pos=(22, 70))
COMMA: Token(,, ',', Line:Pos=(22, 71))
FLOAT: Token(FLOAT, '1.1', Line:Pos=(22, 75))
BRACKET_CLOSE: Token(), ')', Line:Pos=(22, 76))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 77))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 78))
INT: Token(INT, '0', Line:Pos=(22, 79))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 80))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 81))
SQUARE_OPEN: Token([, '[', Line:Pos=(22, 82))
INT: Token(INT, '4', Line:Pos=(22, 83))
SQUARE_CLOSE: Token(], ']', Line:Pos=(22, 84))
BRACKET_CLOSE: Token(), ')', Line:Pos=(22, 85))
SEMI_COLON: Token(;, ';', Line:Pos=(22, 86))
KEYWORD: Token(return, 'return', Line:Pos=(23, 15))
BRACKET_OPEN: Token((, '(', Line:Pos=(23, 17))
INT: Token(INT, '25', Line:Pos=(23, 19))
BRACKET_CLOSE: Token(), ')', Line:Pos=(23, 20))
SEMI_COLON: Token(;, ';', Line:Pos=(23, 21))
ID: Token(ID, 'i', Line:Pos=(25, 10))
ASSIGN_OP: Token(=, '=', Line:Pos=(25, 12))
ID: Token(ID, 'dupFunc', Line:Pos=(25, 20))
BRACKET_OPEN: Token((, '(', Line:Pos=(25, 21))
BRACKET_CLOSE: Token(), ')', Line:Pos=(25, 22))
SEMI_COLON: Token(;, ';', Line:Pos=(25, 23))
CURLY_CLOSE: Token(}, '}', Line:Pos=(26, 6))
SEMI_COLON: Token(;, ';', Line:Pos=(26, 7))
CURLY_CLOSE: Token(}, '}', Line:Pos=(28, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(28, 3))
KEYWORD: Token(class, 'class', Line:Pos=(30, 6))
ID: Token(ID, 'Other', Line:Pos=(30, 12))
CURLY_OPEN: Token({, '{', Line:Pos=(30, 13))
KEYWORD: Token(int, 'int', Line:Pos=(31, 8))
ID: Token(ID, 'two', Line:Pos=(31, 12))
SEMI_COLON: Token(;, ';', Line:Pos=(31, 13))
CURLY_CLOSE: Token(}, '}', Line:Pos=(32, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(32, 3))
KEYWORD: Token(int, 'int', Line:Pos=(34, 4))
ID: Token(ID, 'func', Line:Pos=(34, 9))
BRACKET_OPEN: Token((, '(', Line:Pos=(34, 10))
KEYWORD: Token(int, 'int', Line:Pos=(34, 13))
ID: Token(ID, 'i', Line:Pos=(34, 15))
COMMA: Token(,, ',', Line:Pos=(34, 16))
KEYWORD: Token(float, 'float', Line:Pos=(34, 22))
ID: Token(ID, 'j', Line:Pos=(34, 24))
BRACKET_CLOSE: Token(), ')', Line:Pos=(34, 25))
CURLY_OPEN: Token({, '{', Line:Pos=(34, 26))
KEYWORD: Token(return, 'return', Line:Pos=(35, 11))
BRACKET_OPEN: Token((, '(', Line:Pos=(35, 13))
INT: Token(INT, '1', Line:Pos=(35, 14))
BRACKET_CLOSE: Token(), ')', Line:Pos=(35, 15))
SEMI_COLON: Token(;, ';', Line:Pos=(35, 16))
CURLY_CLOSE: Token(}, '}', Line:Pos=(37, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(37, 3))
KEYWORD: Token(program, 'program', Line:Pos=(39, 8))
CURLY_OPEN: Token({, '{', Line:Pos=(39, 9))
KEYWORD: Token(float, 'float', Line:Pos=(41, 10))
ID: Token(ID, 'b', Line:Pos=(41, 12))
SQUARE_OPEN: Token([, '[', Line:Pos=(41, 13))
INT: Token(INT, '2', Line:Pos=(41, 14))
SQUARE_CLOSE: Token(], ']', Line:Pos=(41, 15))
SEMI_COLON: Token(;, ';', Line:Pos=(41, 16))
KEYWORD: Token(int, 'int', Line:Pos=(42, 8))
ID: Token(ID, 't', Line:Pos=(42, 10))
SQUARE_OPEN: Token([, '[', Line:Pos=(42, 11))
INT: Token(INT, '100', Line:Pos=(42, 14))
SQUARE_CLOSE: Token(], ']', Line:Pos=(42, 15))
SQUARE_OPEN: Token([, '[', Line:Pos=(42, 16))
INT: Token(INT, '50', Line:Pos=(42, 18))
SQUARE_CLOSE: Token(], ']', Line:Pos=(42, 19))
SQUARE_OPEN: Token([, '[', Line:Pos=(42, 20))
INT: Token(INT, '3', Line:Pos=(42, 21))
SQUARE_CLOSE: Token(], ']', Line:Pos=(42, 22))
SEMI_COLON: Token(;, ';', Line:Pos=(42, 23))
KEYWORD: Token(int, 'int', Line:Pos=(43, 8))
ID: Token(ID, 'x', Line:Pos=(43, 10))
SQUARE_OPEN: Token([, '[', Line:Pos=(43, 11))
INT: Token(INT, '1', Line:Pos=(43, 12))
SQUARE_CLOSE: Token(], ']', Line:Pos=(43, 13))
SQUARE_OPEN: Token([, '[', Line:Pos=(43, 14))
INT: Token(INT, '2', Line:Pos=(43, 15))
SQUARE_CLOSE: Token(], ']', Line:Pos=(43, 16))
SEMI_COLON: Token(;, ';', Line:Pos=(43, 17))
ID: Token(ID, 'test', Line:Pos=(44, 9))
ID: Token(ID, 'tt', Line:Pos=(44, 12))
SEMI_COLON: Token(;, ';', Line:Pos=(44, 13))
KEYWORD: Token(int, 'int', Line:Pos=(45, 8))
ID: Token(ID, 'v', Line:Pos=(45, 10))
SEMI_COLON: Token(;, ';', Line:Pos=(45, 11))
ID: Token(ID, 'x', Line:Pos=(47, 6))
SQUARE_OPEN: Token([, '[', Line:Pos=(47, 7))
INT: Token(INT, '0', Line:Pos=(47, 8))
SQUARE_CLOSE: Token(], ']', Line:Pos=(47, 9))
SQUARE_OPEN: Token([, '[', Line:Pos=(47, 10))
INT: Token(INT, '0', Line:Pos=(47, 11))
SQUARE_CLOSE: Token(], ']', Line:Pos=(47, 12))
ASSIGN_OP: Token(=, '=', Line:Pos=(47, 14))
ID: Token(ID, 'b', Line:Pos=(47, 16))
SQUARE_OPEN: Token([, '[', Line:Pos=(47, 17))
ID: Token(ID, 'v', Line:Pos=(47, 18))
SQUARE_CLOSE: Token(], ']', Line:Pos=(47, 19))
SEMI_COLON: Token(;, ';', Line:Pos=(47, 20))
COMMENT: Token(//, '//tt.tit = 9.9;', Line:Pos=(49, 20))
ID: Token(ID, 'x', Line:Pos=(52, 6))
SQUARE_OPEN: Token([, '[', Line:Pos=(52, 7))
INT: Token(INT, '1', Line:Pos=(52, 8))
MATH_OP: Token(-, '-', Line:Pos=(52, 9))
KEYWORD: Token(not, 'not', Line:Pos=(52, 12))
MATH_OP: Token(-, '-', Line:Pos=(52, 13))
INT: Token(INT, '2', Line:Pos=(52, 14))
MATH_OP: Token(-, '-', Line:Pos=(52, 15))
ID: Token(ID, 'x', Line:Pos=(52, 16))
SQUARE_OPEN: Token([, '[', Line:Pos=(52, 17))
INT: Token(INT, '0', Line:Pos=(52, 18))
MATH_OP: Token(-, '-', Line:Pos=(52, 19))
ID: Token(ID, 'b', Line:Pos=(52, 20))
SQUARE_OPEN: Token([, '[', Line:Pos=(52, 21))
ID: Token(ID, 'func', Line:Pos=(52, 25))
BRACKET_OPEN: Token((, '(', Line:Pos=(52, 26))
INT: Token(INT, '8', Line:Pos=(52, 27))
COMPARE_OP: Token(>, '>', Line:Pos=(52, 28))
INT: Token(INT, '9', Line:Pos=(52, 29))
MATH_OP: Token(/, '/', Line:Pos=(52, 31))
INT: Token(INT, '999', Line:Pos=(52, 35))
MATH_OP: Token(+, '+', Line:Pos=(52, 37))
INT: Token(INT, '9', Line:Pos=(52, 38))
MATH_OP: Token(-, '-', Line:Pos=(52, 39))
INT: Token(INT, '8', Line:Pos=(52, 40))
MATH_OP: Token(-, '-', Line:Pos=(52, 41))
INT: Token(INT, '7', Line:Pos=(52, 42))
COMMA: Token(,, ',', Line:Pos=(52, 43))
ID: Token(ID, 'b', Line:Pos=(52, 45))
SQUARE_OPEN: Token([, '[', Line:Pos=(52, 46))
INT: Token(INT, '1', Line:Pos=(52, 47))
SQUARE_CLOSE: Token(], ']', Line:Pos=(52, 48))
BRACKET_CLOSE: Token(), ')', Line:Pos=(52, 49))
SQUARE_CLOSE: Token(], ']', Line:Pos=(52, 50))
SQUARE_CLOSE: Token(], ']', Line:Pos=(52, 51))
SQUARE_OPEN: Token([, '[', Line:Pos=(52, 52))
INT: Token(INT, '0', Line:Pos=(52, 53))
SQUARE_CLOSE: Token(], ']', Line:Pos=(52, 54))
SQUARE_CLOSE: Token(], ']', Line:Pos=(52, 55))
SQUARE_OPEN: Token([, '[', Line:Pos=(52, 56))
INT: Token(INT, '99', Line:Pos=(52, 58))
SQUARE_CLOSE: Token(], ']', Line:Pos=(52, 59))
ASSIGN_OP: Token(=, '=', Line:Pos=(52, 61))
INT: Token(INT, '6', Line:Pos=(52, 63))
SEMI_COLON: Token(;, ';', Line:Pos=(52, 64))
ID: Token(ID, 'x', Line:Pos=(54, 6))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 7))
ID: Token(ID, 'x', Line:Pos=(54, 8))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 9))
INT: Token(INT, '1', Line:Pos=(54, 10))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 11))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 12))
INT: Token(INT, '2', Line:Pos=(54, 13))
MATH_OP: Token(+, '+', Line:Pos=(54, 14))
ID: Token(ID, 'x', Line:Pos=(54, 15))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 16))
INT: Token(INT, '0', Line:Pos=(54, 17))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 18))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 19))
INT: Token(INT, '0', Line:Pos=(54, 20))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 21))
MATH_OP: Token(+, '+', Line:Pos=(54, 22))
INT: Token(INT, '77', Line:Pos=(54, 24))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 25))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 26))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 27))
INT: Token(INT, '99', Line:Pos=(54, 29))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 30))
ASSIGN_OP: Token(=, '=', Line:Pos=(54, 32))
INT: Token(INT, '5', Line:Pos=(54, 34))
MATH_OP: Token(+, '+', Line:Pos=(54, 36))
INT: Token(INT, '6', Line:Pos=(54, 38))
MATH_OP: Token(+, '+', Line:Pos=(54, 40))
INT: Token(INT, '7', Line:Pos=(54, 42))
MATH_OP: Token(+, '+', Line:Pos=(54, 44))
ID: Token(ID, 't', Line:Pos=(54, 46))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 47))
INT: Token(INT, '3', Line:Pos=(54, 48))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 49))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 50))
INT: Token(INT, '4', Line:Pos=(54, 51))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 52))
SQUARE_OPEN: Token([, '[', Line:Pos=(54, 53))
INT: Token(INT, '5', Line:Pos=(54, 54))
SQUARE_CLOSE: Token(], ']', Line:Pos=(54, 55))
SEMI_COLON: Token(;, ';', Line:Pos=(54, 56))
ID: Token(ID, 't', Line:Pos=(56, 6))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 7))
INT: Token(INT, '2', Line:Pos=(56, 8))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 9))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 10))
INT: Token(INT, '4', Line:Pos=(56, 11))
MATH_OP: Token(-, '-', Line:Pos=(56, 12))
INT: Token(INT, '5', Line:Pos=(56, 13))
MATH_OP: Token(+, '+', Line:Pos=(56, 14))
INT: Token(INT, '3', Line:Pos=(56, 15))
MATH_OP: Token(-, '-', Line:Pos=(56, 16))
ID: Token(ID, 't', Line:Pos=(56, 17))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 18))
INT: Token(INT, '5', Line:Pos=(56, 19))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 20))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 21))
ID: Token(ID, 't', Line:Pos=(56, 22))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 23))
INT: Token(INT, '1', Line:Pos=(56, 24))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 25))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 26))
INT: Token(INT, '2', Line:Pos=(56, 27))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 28))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 29))
INT: Token(INT, '3', Line:Pos=(56, 30))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 31))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 32))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 33))
INT: Token(INT, '4', Line:Pos=(56, 34))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 35))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 36))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 37))
ID: Token(ID, 't', Line:Pos=(56, 38))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 39))
INT: Token(INT, '0', Line:Pos=(56, 40))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 41))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 42))
INT: Token(INT, '0', Line:Pos=(56, 43))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 44))
SQUARE_OPEN: Token([, '[', Line:Pos=(56, 45))
INT: Token(INT, '0', Line:Pos=(56, 46))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 47))
SQUARE_CLOSE: Token(], ']', Line:Pos=(56, 48))
ASSIGN_OP: Token(=, '=', Line:Pos=(56, 50))
INT: Token(INT, '4', Line:Pos=(56, 52))
SEMI_COLON: Token(;, ';', Line:Pos=(56, 53))
ID: Token(ID, 'x', Line:Pos=(58, 6))
SQUARE_OPEN: Token([, '[', Line:Pos=(58, 7))
INT: Token(INT, '0', Line:Pos=(58, 8))
SQUARE_CLOSE: Token(], ']', Line:Pos=(58, 9))
SQUARE_OPEN: Token([, '[', Line:Pos=(58, 10))
INT: Token(INT, '0', Line:Pos=(58, 11))
SQUARE_CLOSE: Token(], ']', Line:Pos=(58, 12))
ASSIGN_OP: Token(=, '=', Line:Pos=(58, 14))
INT: Token(INT, '5', Line:Pos=(58, 16))
MATH_OP: Token(+, '+', Line:Pos=(58, 18))
INT: Token(INT, '6', Line:Pos=(58, 20))
MATH_OP: Token(*, '*', Line:Pos=(58, 22))
INT: Token(INT, '7', Line:Pos=(58, 24))
MATH_OP: Token(-, '-', Line:Pos=(58, 26))
ID: Token(ID, 't', Line:Pos=(58, 28))
SQUARE_OPEN: Token([, '[', Line:Pos=(58, 29))
INT: Token(INT, '5', Line:Pos=(58, 30))
SQUARE_CLOSE: Token(], ']', Line:Pos=(58, 31))
SQUARE_OPEN: Token([, '[', Line:Pos=(58, 32))
INT: Token(INT, '5', Line:Pos=(58, 33))
SQUARE_CLOSE: Token(], ']', Line:Pos=(58, 34))
SQUARE_OPEN: Token([, '[', Line:Pos=(58, 35))
INT: Token(INT, '1', Line:Pos=(58, 36))
SQUARE_CLOSE: Token(], ']', Line:Pos=(58, 37))
SEMI_COLON: Token(;, ';', Line:Pos=(58, 38))
KEYWORD: Token(int, 'int', Line:Pos=(61, 8))
ID: Token(ID, 'testfunc', Line:Pos=(61, 17))
SEMI_COLON: Token(;, ';', Line:Pos=(61, 18))
CURLY_CLOSE: Token(}, '}', Line:Pos=(63, 2))
SEMI_COLON: Token(;, ';', Line:Pos=(63, 3))
$: Token($, None, Line:Pos=(63, 3))