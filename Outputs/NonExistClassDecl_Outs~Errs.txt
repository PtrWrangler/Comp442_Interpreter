OUTPUT OF test_NonExistClassDecl.txt: 

class Utility {
    int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ;
    float var2 ;
    Tool tool ;
    Tool l ;
    int findMax ( int array [ 100 ] [ 5 ] [ 4 ] , int rr , float yyu_7 [ 4 ] [ 5 ] [ 6 ] ) {
        int maxValue ;
        int idx ;
        rr = 8 ;
        maxValue = array [ 100 ] ;
        for ( int idx = 99 ;
        idx > 0 ;
        idx = idx - 1 ) {
            if ( array [ idx ] > maxValue ) then {
                maxValue = array [ idx ] ;
                
            }else {
                
            };
            
        };
        return ( maxValue ) ;
        
    };
    int findMin ( int array [ 100 ] ) {
        int minValue ;
        int idx ;
        float var2 ;
        minValue = array [ 100 ] ;
        for ( int idx = 1 ;
        idx <= 99 ;
        idx = ( idx ) + 1 ) {
            if ( array [ idx ] < maxValue ) then {
                minValue = array [ idx ] ;
                
            }else {
                
            };
            
        };
        return ( minValue ) ;
        
    };
    
};
class testClass {
    int test ;
    BADCLASS u ;
    
};
class Tool {
    int test ;
    testClass t ;
    
};
class g {
    int j ;
    
};
float randomize ( ) {
    float value ;
    Tool tooly ;
    testClass t ;
    Utility u ;
    g gg ;
    value = 100 * ( 2 + 3.0 / 7.0006 ) ;
    value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 ;
    return ( value ) ;
    
};
int testFunc ( int testint [ 5 ] [ 4 ] [ 3000 ] ) {
    Utility testutil ;
    
};
program {
    int sample [ 100 ] ;
    int idx ;
    int maxValue ;
    int minValue ;
    Utility utility ;
    Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ;
    for ( int t = 0 ;
    t <= 100 ;
    t = t + 1 ) {
        get ( sample [ t ] ) ;
        sample [ t ] = ( sample [ t ] * randomize ( ) ) ;
        
    };
    maxValue = utility . findMax ( sample ) ;
    minValue = utility . findMin ( sample ) ;
    utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ;
    arrayUtility [ 1 ] [ 1 ] [ 1 ] [ 1 ] . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 2 ;
    put ( maxValue ) ;
    put ( minValue ) ;
    
};


ERRORS OF test_NonExistClassDecl.txt:
  -- ! Error locations are accurate to the original input file ! --

Source Program contained no parsing errors.

Error: Class type 'Token(ID, 'BADCLASS', Line:Pos=(41, 13))' does not exist.