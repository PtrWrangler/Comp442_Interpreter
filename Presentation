1) INTERFACE
    1.1) - input interface: user-provided file name (/1)
        Table Parser (top of file), add argparser if you want...

    1.2) - output interface: clarity of standard output, alternate output to different files (/1)
        My programmer debugging info is displayed in the output window.
        Important user information is displayed at the bottom of the respective output file
            - The ouput file's first section contains just parser 'flush' of the processed lexer tokens, it is useful
              to see right away what has been parsed when an error occurs while building my compiler.
            - The output file's second section contains the parsing error(s)/warning(s) if any...
              If no parsing errors, display first pass semantic error(s)/warning(s) if any...
              If no first pass semantic errors, display second pass semantic error(s)/warning(s) if any...
            - If the compiler passes parsing and FIRST pass semantic error checking, the entry table will be displayed.

        notes:
        - My debug code flushes to a file called 'Outputs/_FLUSH.txt'. This helped while developping my code.
            when my code does not finishing parsing usually in the case problems with the Lexer, I could just check the
            flush file to see exactly how far the lexer had made it


        SHOWCASE TEST-FILES:


2) LEXICAL ANALYSIS
    2.1) - lexical error detection and reporting: completeness and clarity (/2)
        lexer tests are in testing/LexerTests, outputs goto Outputs/LexerOutputs
        There is also the raw token symbol output in "Outputs/LexerOutputs?lexerOutput.txt"

    2.2) - output token stream: show output in file (/2)
        (show output files)

    2.3) - integers and floating point numbers processed according to original specifications (/2)
        (test_IntsAndFloats)

    2.4) - comments: inline, block, unending (/2)
        (test_comments.txt)

3) SYNTACTIC ANALYSIS
    3.1) - Syntactic error detection, reporting and recovery: completeness and clarity (/3)
        (show any demo file and simulate errors, the errors described further down)
        explain the error handling method discussed in class was simply panic mode. your table contains the first and
         follow set actions, so handling error at that point would just be scanning until you find what you want.
         - So you implemented a type of syncronization of the parsing stack and the input file: pop the stack until the
          next sunc token eg [$, ;, {, }] and then scan until you find the next expected one from the stack.
          This allows you to somewhat recover and find any more simple syntax errors.

    3.2)  - output derivation: show output in file
        (show any output file)

    3.3)  - main function, free functions
        - my rules state the program function is expected to be last
        - classes come first then free functions, then program.

    3.4)  - variable declarations: int, float, class, array
        TESTFILE:
        - test_classANDprog

    3.5)  - complex expressions (all arithmetic, relational and logic operators in one expression)
        TESTFILE:
            - test_Arith.txt
            - test_expr.txt
            - test_exprNestedFuncsandVars.txt
            - test_nestedVarIndiceExpr_saving.txt

    3.6)  - conditional statement, including nested without brackets
        TESTFILE:
            - test_loopsANDifs.txt

    3.7)  - loop statement, including nested without brackets
        TESTFILE:
            - test_loopsANDifs.txt

    3.8)  - class declarations: data members, methods
        TESTFILE:
            - test_assignToParam.txt
            - test_funcParams.txt
            - test_Utility.txt
            - test_varsInDifferentScopes.txt

    3.9)  - access to class members, including multiply nested and including arrays
        TESTFILE: test_expr.txt
            note having trouble come semantic checks

    3.10) - access to arrays : uni- and multi-dimensional, using expressions as index
            - test_expr.txt
            - test_nestedVarIndiceExpr_saving.txt
            - test_Utility.txt

4) SEMANTIC ANALYSIS
    4.1) - semantic error detection and reporting: completeness and clarity
        (show any demo file and simulate errors, the errors described further down)

    4.2) - output symbol tables: show output in file
        (explain symbol table structure)
        SymbolTables:
        Global SymbolTable is created at start. SymbolTables have a list of entries. (class/func/program)
            these entries have links to sub-SymbolTables, in the example of a class, it will have entries of
             variables, assignments, and function definitions (will have links of their own to another sub-SymbolTable)

        Entries:
        - have fields to store name and type tokens which contain the original location to be able to reference
         should there be an error.
        - kind field will remember if the entry is a assignment/variable/function/variable call/function call/parameter/nest
        - arraySize for array declaration size
        - IDXorPARAMS to store either array index or in the case of a function the parameters being passed
        -  memory location and assembly code alias.

    4.3) - attribute migration mechanism: explain in compiler code
        - SymbolTable stack, 0 is the global, as you increase in scope you add that symbol table on the stack
        - for class creation everything happens in one action,
         create new global table entry, link-> new SymbolTable on stack, ending a class pops it from the stack

        - now for attribute migration you have the attr_stack(buffer) and the prev_tokenBuffer.
            - every Token that passes is overwritten in the prev_tokenBuffer to act on it immediately after if need be
            - So for a var decl you would stack type then name tokens then arraySize as integers.
                Now when it comes time to enter the variable it pops attr_stack while top==int and pushes them
                in reverse to the entry's arraySize, finally popping the name and type and saving the new entry in the
                top SymbolTable(current scope) entries list.

            - Func decl are similar creating the entry and symbolTable link, adding the parameters as 'parameter' entries

            - Operators/Operands have their own special stack of lists. the indice_lists.
                each one is appended to the end of the topmost list.
                As soon as you want to use a func call or variable call inside an expression, first you append a blank
                 entry to the end of the topmost indice_list, now if you start a function's params or indices for a var,
                 you push a new list on top of the indice_list stack
                    Once you finish the vars indice or func param, you pack the top most indice list into the entry
                    at the end of the list below's IDXorPARAMS attribute.

            - For variable assignments, as soon as you hit the '=' symbol you are using the same indice_lists method but
                at the end you store it in the assignment attribute of the top SymbolTable's latest entry


    4.4)  - undefined id: variable, class, function
        Undefined variables or duplicate variable declarations are caught in the first pass

    4.5)  - undefined member: data member, method, including deeply nested
        (show corresponding test file)

    4.6)  - forward/circular references: implementation of two passes
        (show corresponding test file)

    4.7)  - multiply defined id: variable, class, function, class member
        (show corresponding test file)

    4.8)  - arrays: using right number of dimensions
        (show corresponding test file)

    4.9)  - type checking of a complex expression
        (show corresponding test file)

    4.10) - type checking of an assignment statement
        (show corresponding test file)

    4.11) - type checking of the return value of a function
        (show corresponding test file)

    4.12) - function calls: right number and types of parameters upon call
        (show corresponding test file)


5) CODE GENERATION

BONUS MARKS:



Notes (rules):
 - program function is expected to be last
 - classes come first then free functions, then program.

 - An Expression(object cannot be operated with or compared to any other object or primitive type
