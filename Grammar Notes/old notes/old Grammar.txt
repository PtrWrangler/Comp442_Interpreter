prog           -> classDecl progBody 
classDecl      -> class Id { varDecl funcDef } ; classDecl 
                  | EPSILON 
progBody       -> program funcBody ; funcDef 
funcHead       -> type Id ( fParams ) 
funcDef        -> funcHead funcBody ; funcDef 
                  | EPSILON 
funcBody       -> { varDecl gen_statements } 
varDecl        -> type Id arraySize ; varDecl 
                  | EPSILON 
statement      -> for ( type Id assignOp expr ; relExpr ; assignStat ) statBlock ; 
                  | if ( expr ) then statBlock else statBlock ; 
                  | get ( variable ) ; 
                  | put ( expr ) ; 
                  | return ( expr ) ; 
                  | assignStat ; 
gen_statements -> statement gen_statements 
                  | EPSILON 
assignStat     -> variable assignOp expr 
statBlock      -> { gen_statements } 
                  | statement 
                  | EPSILON 
expr           -> arithExpr gen_relArithExpr
gen_relArithExpr -> relOp arithExpr | EPSILON
arithExpr      -> term gen_addArithExpr
gen_addArithExpr  -> addOp arithExpr | EPSILON
sign           -> + | - 
term           -> factor gen_Term
gen_Term       -> multOp term | EPSILON
factor         -> Id paramsOrIndice
                  | ( arithExpr ) 
                  | not factor 
                  | Number
                  | sign factor 
paramsOrIndice -> ( aParams ) | indice
variable       -> Id indice 
indice         -> [ arithExpr ] indice 
                  | EPSILON 
arraySize      -> [ int ] | EPSILON 
type           -> Id | Number
fParams        -> type Id arraySize fParamsTail 
                  | EPSILON 
aParams        -> expr aParamsTail
fParamsTail    -> , type Id arraySize fParamsTail 
                  | EPSILON 
aParamsTail    -> , expr aParamsTail 
                  | EPSILON 
assignOp       -> = 
relOp          -> < | <= | <> | == | > | >= 
addOp          -> + | - | or 
multOp         -> * | / | and 
Id               -> Letter Alphanum 
Alphanum         -> _ Alphanum | Letter Alphanum 
                  | Digit Alphanum | EPSILON 
Letter           -> A | B | C | D | E | F | G | H | I | J | K | L | M 
                  | N | O | P | Q | R | S | T | U | V | W | X | Y | Z 
                  | a | b | c | d | e | f | g | h | i | j | k | l | m 
                  | n | o | p | q | r | s | t | u | v | w | x | y | z 


Number -> Non_Zero gen_Number is_float | 0 is_float | is_float
is_float -> . float | EPSILON

float -> 0 nextDecimalPlace | Non_Zero nextDecimalPlace
nextDecimalPlace -> Number Non_Zero | EPSILON

gen_Number -> Digit gen_Number | EPSILON 
Digit            -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
Non_Zero         -> 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 

