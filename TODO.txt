Main objectives & notes:
	re-read important slides

    in the classUsageDict, store Tokens to be able to reference line numbers in 'second pass'
    - error handling if a generator production, infinitly produces them on parsing stack
        each production should have a set of recovery tokens?
    - explain all symantic actions and symbols, explanation of organization
    - apply table deletions?
        maybe i should be outputting symboltables and entries to a file as i go.
        maybe deletin an entry with link
    - go back and look at comments in lexer, test more
    - output file should contain original code followed by errors, not my shitty debug program output
    - idea for any order classOrFunc
        prog             -> classOrFunc progBody
        classOrFunc      -> classDecl classOrFunc
        classOrFunc      -> funcDef classOrFunc
        classOrFunc      -> EPSILON
        - you could maybe even add globalVarDecls?

    - possibly make circular reference warnings more descriptive (locations)

    - I tried to change my symbol table implementation to a sort of doubly linked list...
        but am putting this plan/idea aside for now...


    # regex to highlight all semantic symbols in grammar
	[A-Z]+_

A4 look over:
    todo:
    - check in second pass? is UDType decl are valid and for circular class defs

    - the local definition overrides the higher-level one
        but give a warning that its overriding
    - function calls must match number of arguments required in def

    search for name and kind
    varFuncClass ->

    semantic errors to be caught:
    - circular dependancy of class variables
    - using a variable before it is defined.
    - duplicate variable definition (in same scope)


    - error recovery
    error recovery now is done with syncronizing tokens ;, }, {
    its not enough though maybe if each production had its own setâ€¦
        Prof says to use first and follow set method discussed in class

    - no need for sub scope (new semantic table) when creating for or if statements
    - look at symbol table search method?

    - Lexer does not really need 2 type fields
    - nicely display 2d table for debug?
    - can classes and funcs have to be in oorder in the source file?


    done:
    - catching duplicate class names
    - duplicate variable or parameter declaration in same scope now registers a warning, with both tokens.
        but semantic parsing can continue, re-declaring the specified variable
    - var usage checking reworked.

    - circular class or declarations or functions give warnings
        a recursive function that is called in the 'second pass' tells you about possible circular references.

    ATTRIBUTE MIGRATION description for nested variable calls in indices:
        In the semantic analyser, I use the variable indice_lists a a list of lists. At the start of an indice for a variable assign or variable call, a  new list is appended to the main list. everytime a operand/operator/factor is encountered it appends to the list list and if a variable call is encountered and it has indices, the entry is appended to the tail, then a new list is appended to handle the nested arith expression that could contain more nested variable calls. When an indice finishes, append it to the index section of the last entry of the list below the indice_lists tail (should be the pending variable call entry). when the indices finish for a given variable call, check if the variable exists and the correct number of dimensions were specified.




