Main objectives & notes:
	re-read important slides

    - the var usage checking should definitly be rethought...
    - error handling if a generator production, infinitly produces them on parsing stack
        each production should have a set of recovery tokens?
    - explain all symantic actions and symbols, explanation of organization
    - apply table deletions?
        maybe i should be outputting symboltables and entries to a file as i go.
        maybe deletin an entry with link


    # regex to highlight all semantic symbols in grammar
	[A-Z]+_

A4 look over:
    todo:
    - the local definition overrides the higher-level one
        but give a warning that its overriding
    - function calls must match number of arguments required in def

    search for name and kind
    varFuncClass ->


    semantic errors to be caught:
    - circular dependancy of class variables
    - using a variable before it is defined.
    - duplicate variable definition (in same scope)


    - error recovery
    error recovery now is done with syncronizing tokens ;, }, {
    its not enough though maybe if each production had its own setâ€¦
        Prof says to use first and follow set method discussed in class

    - no need for sub scope (new semantic table) when creating for or if statements
    - look at symbol table search method?

    - Lexer does not really need 2 type fields
    - nicely display 2d table for debug?
    - can classes and funcs have to be in oorder in the source file?


    done:
    - catching duplicate class names
    - duplicate variable or parameter declaration in same scope now registers a warning, with both tokens.
        but semantic parsing can continue, re-declaring the specified variable

